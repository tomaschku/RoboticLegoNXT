//"../EasyCoding/.nxc" has been used because of the compiler no understanding "/.nxc"
#include "../EasyCoding/Rect.nxc"
#include "../EasyCoding/MoreStrings.nxc"
#include "../EasyCoding/Bluetooth.nxc"

#define CHAR_HEIGHT 8
#define CHAR_WIDTH 5
#define CHARS_PER_ROW 16
#define CHARS_PER_COLUMN 8

long map(long num, long in_min, long in_max, long out_min, long out_max)
{
  return (num - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
};

long rnd(long min, long max)
{
  return map(rand(), 0, RAND_MAX, min, max);
};

bool between(long min, long max, long num)
{
  return (num < min && num > max);
};

long limit(long min, long max, long num)
{
  if(num < min) { return min; };
  if(num > max) { return max; };
  return num;
};

long min(long a, long b)
{
  return a < b ? a : b;
};

long max(long a, long b)
{
  return a > b ? a : b;
};

bool getBTN_EXIT_FLAG() {
  return AbortFlag();
};
void BTN_EXIT_FLAG(bool wait_before_exit) //If true, it waits 2 Seconds before exiting
{
  SetLongAbort(wait_before_exit);
};

bool BTNPRESSED(unsigned int btn, bool reset = false)
{
  switch (btn) {
    case BTNEXIT:
      if(getBTN_EXIT_FLAG()) {
        return ButtonPressed(BTNEXIT, reset);
      } else {
        return false; //Because if the AbortFlag is false, the button cannot be pressed
      };
      break;
    case BTNRIGHT:
    case BTNLEFT:
    case BTNCENTER:
      return ButtonPressed(btn, reset);
      break;
  }
};

void pause(int btn = BTNCENTER, int check_delay = 10, bool Wait_Until_Stop = true)
{
  while(!BTNPRESSED(btn)) { Wait(check_delay); };
  while(BTNPRESSED(btn) && Wait_Until_Stop) { Wait(check_delay); };
}

void CenterTextOut(int y, string txt, unsigned long options = DRAW_OPT_NORMAL) {
  TextOut((DISPLAY_WIDTH-StrLen(txt)*CHAR_WIDTH)/2-5, y, txt, options);
};

long GetNumber(string msg, long min, long max, int switching_time = 100) {//Inclusive
  int value = (max+min)/2; //Use the middle at the start
 
  while(!BTNPRESSED(BTNCENTER)) {
    CenterTextOut(LCD_LINE4, msg);
    CenterTextOut(LCD_LINE5, NumToStr(value));
    
    if(BTNPRESSED(BTNRIGHT)) { value++; };
    
    if(BTNPRESSED(BTNLEFT)) {  value--; };
    
    if (min > value) { value = max; };
    if (value > max) { value = min; };
    Wait(switching_time);
  };
   
  while(BTNPRESSED(BTNCENTER)) { Wait(10); }; //No accidental press after function
  return value;
};

string CenterText(string txt) {
  if(StrLen(txt) == 0) { return ""; };
  string str = "";
 
  for(int i = 0; i <= (DISPLAY_WIDTH-StrLen(txt)*CHAR_WIDTH)/2-5/CHAR_WIDTH; i++) { //Forgot what the formula does exactly
    str = str + " ";
  };
  
  return str + txt;
};
void RightTextOut(int y, string txt, unsigned long options = DRAW_OPT_NORMAL) {
  TextOut(DISPLAY_WIDTH-(StrLen(txt)*CHAR_WIDTH+5), y, txt, options);
};
string RightText(string txt) {
  if(StrLen(txt) == 0) { return ""; };
  string str = "";
  
  for(int i = 0; i <= (DISPLAY_WIDTH-(StrLen(txt)*5+5/CHAR_WIDTH)); i++) {
	  str = str + " ";
  };
  
  return str + txt;
};

void InvertLine(int y)
{
  RectOut(0, y, 100, 8, DRAW_OPT_INVERT);
};

unsigned long getProgramRuntime() {
  return CurrentTick() - FirstTick();
};

bool Bit_Read(unsigned long number, byte idx) {
  if(idx > 32) { return number; };
  return (number >> idx) & 1;
};
unsigned long Bit_Write(unsigned long number, byte idx, bool state) {
  if(idx > 32) { return number; };
  return (number & ~(1 << idx)) | (state << idx);
};
unsigned long Bit_Toggle(unsigned long number, byte idx) {
  if(idx > 32) { return number; };
  return number ^ (1 << idx);
};
