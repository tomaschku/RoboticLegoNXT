long a=-40, b = 23, __b=34;

byte zz;

byte buf[];
long data[];
byte foo[][];
string weird = "fred";

#define Testing OnRev(OUT_BC, 50)

void George(byte b)
{
  int g1 = 4, g2=-3;
  byte b1[], b2=33;

  b2 = g1+g2+b;
//  b1 = OUT_BC;
  OnFwd(OUT_BC, b2);
  Wait(1000);
//  byte b1[], b2=33;
  Testing;
  Wait(1000);
}


//void MyTestSub(int x, int y, short j);
void MyTestSub(int x, int y, short j)
//void MyTestSub(x, y, j)
{
  byte g1=3,
       g2=5;
  int foo=-3;

  int fsize;
  int handle;

  if (OpenFileAppend("balance.txt" , fsize, handle) > 0)
    PlayTone(TONE_A4, MS_500);

  foo = GetOutput(OUT_A, TachoCount);
  SetSensor(IN_3, SENSOR_ROTATION);
  George(g2*10);
  foo = x + y * j;
  g1 = foo/4;
  ClearScreen();
  NumOut(0, 0, g1);
  OnFwd(OUT_BC, g1);
  Wait(4000);
}

task Fred()
{
  ArrayInit(data, 0, 4);
  data[0] = 23;
  weird[2] = "Wd" ;
//  data[0] = weird[0];
//  NumOut(0, LCD_LINE4, true, data[0]);
  weird += BrickDataName();
  ClearScreen();
  TextOut(50, LCD_LINE1, weird);
  GetBrickDataAddress(buf);
  b = ArrayLen(buf);
  NumOut(0, LCD_LINE1, b);
  for (a=0, b=2; a < b; a++)
  {
    NumOut(a*15, LCD_LINE2, buf[a]);
  }
  Wait(10000);
  OnFwd(OUT_BC, -75);
  Wait(5000);
}

char j=-40, k = 23, x=4;
mutex myMutex;

string msg="test" , blech;

string FooBar(int a, string b)
{
  string result ="r=" ;
  int x;
  x = Random(4);
  switch(Random(4))
  {
    case -1:
      // do something when X is 1
      OnFwd(OUT_A, 75);
//      break;
    case 2:
    case 3:
      // do something else when x is 2 or 3
      OnRev(OUT_A, 75);
      break;
    case 0x3f + 14 - 2 * 3:
    default:
      // do this when x is not 1, 2, or 3
      Off(OUT_A);
      break;
  }

  switch(NumToStr(23))
  {
    case "23" :
      OnRevSync(OUT_AB, 75, 0);
      break;
    default :
      Off(OUT_A);
      break;
  }

  switch(k)
  {
    case true:
      OnFwd(OUT_A, 75);
      break;
    case ' ':
      OnFwd(OUT_A, 75);
      break;
    case 'a':
      OnRev(OUT_B, 75);
  }

  result += NumToStr(a);
  result += b;
  return result;
}

int Multiply(int a, int b)
{
  return a * b;
}

task main (){
  int xxxx = 23;
  Precedes(Fred);

//  Stop( xxxx == 23 );

//  Fred;

  msg = FooBar(10, "_fred" );
  ClearScreen();
  TextOut(0, LCD_LINE1, msg);
  NumOut(0, LCD_LINE2, xxxx);
  xxxx = Multiply(2, 3) + 4;
  NumOut(0, LCD_LINE3, xxxx);
  xxxx = Multiply(2, 3);
  NumOut(0, LCD_LINE4, xxxx);
  NumOut(0, LCD_LINE5, Multiply(10, xxxx));
  xxxx = ("fred" == "fred") + 2 + (5 >= (2*2));
  NumOut(0, LCD_LINE6, xxxx);
  if ((xxxx > 0) && (xxxx < 40)) {
    msg += "_xxxx" ;
    TextOut(0, LCD_LINE7, msg);
  }
  Wait(10000);
  Stop( "fred" == "fred" );
  Stop(true);
  
  RotateMotorEx(OUT_BC, 75, 90, 0, true, true);
  RotateMotorEx(OUT_BC, 75, 90, 100, true, true);
  RotateMotorEx(OUT_BC, 75, 90, -100, true, true);
  RotateMotorEx(OUT_BC, -75, 90, 0, true, true);
  RotateMotorEx(OUT_BC, -75, 90, 100, true, true);
  RotateMotorEx(OUT_BC, -75, 90, -100, true, true);
  Stop(true);

  a = ((j < 5) ? true : false) ? 23 : 48;

  if (j < 5 && ((k&0x7f) != 0)) {
    OnRev(OUT_B, 40);
  }
  else {
    OnFwd(OUT_B, 70);
  }

  Random(5000);

  if (true)
    OnRev(OUT_B, 40);
  else {
    OnFwd(OUT_C, 30);
  }
    
  {
    OnFwd(OUT_A, 20);
    a=Random(5000) * 2;
    ClearScreen();
    NumOut(0, 20, a);
    Wait(a);
    Off(OUT_A);
  }

  do
  {
//    foobar;
    OnFwd(OUT_BC, 50+40);
    Wait(500);
    Off(OUT_BC);
    Wait(1000);
    a++; b++;
  } while (a < 10);

  repeat(10)
  {
    repeat(4)
    {
      OnFwd(OUT_BC, 50);
      Wait(1000);
      Off(OUT_BC);
      Wait(2000);
    }
  }

  Acquire(myMutex);
  asm {
    add a, a, 1
    sub b, a, 2
    OnRev(OUT_BC, 50)
  }
  Release(myMutex);
  
  SetSensorType(IN_1, IN_TYPE_SWITCH);

  PlayTone(TONE_A4, MS_500);
  while(!SoundState())
    /* do nothing */ ;
  Wait(500);

  PlayFile( "test.rso" );
  
myLoop: LineOut(30, 50, 50, 30);

  LineOut(0, 0, 30, 50);
  PointOut(30, 40);
  CircleOut(30, 40, 10);
  RectOut(30, 50, 20, 10);
  
//  goto myLoop
  
  msg += ".r" + "s" + "o" ;
  
  PlayFile(msg);
//  Wait(1000);

  msg = NumToStr(10);
  TextOut(0, 50, msg);
  msg = StrCat("test" , " " , "please" );
  TextOut(0, 35, msg);
  msg = SubStr("please" , 1, 3);
  TextOut(0, 0, msg);
  msg = Flatten(0x31);
  NumOut(50, 0, StrLen(msg));
  TextOut(60, 0, msg);
  msg = StrReplace("please" , 2, "AA" );
  TextOut(50, 8, msg);



  a = 100 - FreeMemory();
//  a = FreeMemory();

  ClearScreen();
  NumOut(50, LCD_LINE2, a);
  NumOut(50, LCD_LINE3, FreeMemory());
  NumOut(50, LCD_LINE4, BatteryLevel());


  PlayTone(440, 2000);
  ClearScreen();
  NumOut(10, LCD_LINE1, SoundState());
  NumOut(10, LCD_LINE2, SoundFlags());
  Wait(50);
  StopSound();

  x--;
  if ((x%3)!=0) {
    TextOut(10, LCD_LINE1, "whoops");
  }


  until(ButtonPressed(BTN2, true));
  until(!ButtonPressed(BTN2, true));

  SetSensorLowspeed(IN_1);
//  SetButtonState(BTN2, 0);
  ResetSensor(IN_1);
  
  while(BluetoothStatus(0) != 0);
  while(!BluetoothStatus(0));

  while (!ButtonPressed(BTN2, true))
  {
     ClearScreen();
     NumOut(10, LCD_LINE5, SensorUS(IN_1));
     Wait(10);
  }

  while(!ButtonPressed(BTN4, true)) ;
  
  MyTestSub(12, 45, 10);

}

byte d, e, f;


